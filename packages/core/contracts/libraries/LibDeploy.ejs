// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

import { console } from "forge-std/console.sol";

// Solecs
import { World } from "solecs/World.sol";
import { Component } from "solecs/Component.sol";
import { getAddressById } from "solecs/utils.sol";
import { IUint256Component } from "solecs/interfaces/IUint256Component.sol";
import { ISystem } from "solecs/interfaces/ISystem.sol";

// Components
<% components.forEach(({name, path}) => { -%>
import { <%= name %>, ID as <%= name %>ID } from "../<%- path ?? '.' %>/<%= name %>.sol";
<% }) -%>

// Systems
<% systems?.forEach(({name, path}) => { -%>
import { <%= name %>, ID as <%= name %>ID } from "../<%- path ?? '.' %>/<%= name %>.sol";
<% }) -%>

// Libraries
import { LibInit } from "./LibInit.sol";

struct DeployResult {
  World world;
  address deployer;
}

library LibDeploy {

  function deploy(
    address _deployer,
    address _world,
    bool _reuseComponents
  ) internal returns (DeployResult memory result) {
    result.deployer = _deployer;

    // ------------------------
    // Deploy 
    // ------------------------

    // Deploy world
    result.world = _world == address(0) ? new World() : World(_world);
    if(_world == address(0)) result.world.init(); // Init if it's a fresh world

      // Deploy components
    if(!_reuseComponents) {
      address comp;
<% components.forEach(({name}) => { -%>
<% if (withLogs) { -%>
      console.log("Deploying <%= name %>");
<% } -%>
      comp = address(new <%= name %>(address(result.world)));
<% if (withLogs) { -%>
      console.log(comp);
<% } -%>
<% }) -%>
    } 
    
    deploySystems(address(result.world), true);
  }
    
  
  function authorizeWriter(IUint256Component components, uint256 componentId, address writer) internal {
    Component(getAddressById(components, componentId)).authorizeWriter(writer);
  }
  
  function deploySystems(address _world, bool init) internal {
    World world = World(_world);
    // Deploy systems
    ISystem system; 
    IUint256Component components = world.components();
<% systems.forEach(system => { -%>
<% if (withLogs) { -%>
    console.log("Deploying <%= system.name %>");
<% } -%>
    system = new <%= system.name %>(world, address(components));
    world.registerSystem(address(system), <%= system.name %>ID);
<% system.writeAccess?.forEach(component => { -%>
<% if(component === "*") { -%>
<% components.forEach((_component) => { -%>
    authorizeWriter(components, <%= _component.name %>ID, address(system));
<% }) -%>
<% } else { -%>
    authorizeWriter(components, <%= component %>ID, address(system));
<% } -%>
<% }) -%>
<% if(!!system.initialize) { -%>
    if(init) LibInit.init<%= system.name %>(system);
<% } -%>
<% if (withLogs) { -%>
    console.log(address(system));
<% } -%>
<% }) -%>
  }
}