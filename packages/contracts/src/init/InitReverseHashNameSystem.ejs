// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

import { System } from "@latticexyz/solecs/src/System.sol";
import { IWorld } from "@latticexyz/solecs/src/interfaces/IWorld.sol";
import { getAddressById } from "@latticexyz/solecs/src/utils.sol";

import { ReverseHashNameSystem, ID as ReverseHashNameSystemID } from "../common/ReverseHashNameSystem.sol";

uint256 constant ID = uint256(keccak256("system.InitReverseHashName"));

contract InitReverseHashNameSystem is System {
  constructor(IWorld _world, address _components) System(_world, _components) {}

  function execute(bytes memory) public override onlyOwner returns (bytes memory) {
    ReverseHashNameSystem system = ReverseHashNameSystem(getAddressById(world.systems(), ReverseHashNameSystemID));

<% names.forEach(name => { -%>
    system.executeTyped("<%= name %>");
<% }) -%>

    return '';
  }
}